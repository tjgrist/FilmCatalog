Netflix Catalogue System
Console application with the following items:

View
-	Prints out the various Genres and their Titles **

Title
-	Name field **
-	Rating field ** 
-	Overload plus (+) operator to take in two Titles and return an aggregated Genre **
-	Offer two overloaded constructors: one that takes in all the fields and sets them, **
another that takes in no fields and sets the internal fields to null.

Show (inherits from Title)
-	Contains a list of Episodes
-	Overrides parent’s Rating to return an aggregated rating of Episode ratings
-	Overrides ToString() method to return a string of the name of the show and number of episodes

Episode
-	Rating field

Movie (Inherits from Title)
-	Duration field
-	Overrides ToString() method to return a string of the name and duration of the movie

Genre
-	Contains a list of Titles ***
-	Implement custom iterator to iterate over those Titles ***
-	Overload plus (+) operator to take in two Genres and return the aggregated Genre. ***
		o	For example, if we want to create an aggregated genre Romantic Comedy, all the film titles in that specific genre would include film titles from Romance and film titles from Comedy.
-	Overload plus (+) operator to take in a Genre and a Title to return the aggregated Genre. **
		o	Take in a title, add it to the genre, return an aggregated list. **
		o	For example, title Die Hard and genre Comedy would return a list of all comedy films and Die Hard. **
-	Create the genres: All, Romance, Action, Comedy. They need to share some titles (such as Romantic Comedies) by reference, 
not by duplicating the title itself.  

Other project requirements:
-	Utilize the null operators we covered in class
-	Utilize appropriate access modifiers
-	Create at least 5 unit tests
-	Show the program in use. Essentially, there needs to be data, run the program, and print to the console to show that the program works. 

There are plenty of opportunities to implement the tools you learned this week. With that said, remember to always use the right tool for the job. 


My tools:
Overloading
Overriding
abstract classes
generics
enums
interfaces
IEnumerable and IEnumerator
Null operators
properties
unit tests

//Make catalog class iterate through the genres
//should contain list of genres
//Make Genre class have 
//Genre class could have lists of titles;
// Could have Title list instaniated based on its genre
